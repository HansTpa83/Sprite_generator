#!/usr/bin/env php
<?php
function options(){
    $arrOption = [];
    $option;
    foreach ($_SERVER['argv'] as $value){
        if (str_contains($value, "-o=") || str_contains($value, "--override-size=")){
            $option = explode("=", $value);
            $option = $option[1];
            $arrOption['-o'] = intval($option);
        } else if (str_contains($value, "-p=") || str_contains($value, "--padding=")){
            $option = explode("=", $value);
            $option = $option[1];
            $arrOption['-p'] = intval($option);
        } else if (str_contains($value, "-c=") || str_contains($value, "--columns_number=")){
            $option = explode("=", $value);
            $option = $option[1];
            $arrOption['-c'] = intval($option);
        } else if (str_contains($value, "-i=") || str_contains($value, "--output-image=")){
            $option = explode("=", $value);
            $option = $option[1];  
            $arrOption['-i'] = $option;
        } else if (str_contains($value, "-s=") || str_contains($value, "--output-style=")){
            $option = explode("=", $value);
            $option = $option[1];
            $arrOption['-s'] = $option;
        }
    }
    if (!array_key_exists("-p", $arrOption)){
        $arrOption['-p'] = 0;
    }
    if (!array_key_exists("-o", $arrOption)){
        $arrOption['-o'] = 0;
    }
    return $arrOption;
}
function my_scandir ($dir_path) {
    $arr = [
        'Img' => [],
        'Dir' => []
    ];
//Cherche img dans le dir_path
    foreach (glob($dir_path."/*") as $value){
        if (is_dir($value)){
            array_push($arr['Dir'], $value);
        } else if (str_ends_with($value, ".png")){
            array_push($arr['Img'], $value);
        }
    }
    $i = 0;
//Cherche img dans les sous-dossiers si option -r || --recursive
    if (array_search("-r", $_SERVER['argv']) || array_search("--recursive", $_SERVER['argv'])) {
        while($i < count($arr['Dir'])){
            foreach (glob($arr['Dir'][$i]."/*") as $value){
                if (is_dir($value)){
                    array_push($arr['Dir'], $value);
                } else if (str_ends_with($value, ".png")){
                    array_push($arr['Img'], $value);
                }
            }
            $i++;
        }
    }
    return $arr['Img'];
}
function my_merge_image($arrImg, $arrOptions){
    $width = 0;
    $height = 0;    
// Def height/width container
    foreach($arrImg as $value){
        if ($arrOptions["-o"] != 0) {
            $width = count($arrImg) * ($arrOptions["-o"] + $arrOptions["-p"] * 2);
            $height = $arrOptions["-o"] + $arrOptions["-p"] * 2;
            break;
        } else {
            if($height < getimagesize($value)[1] + $arrOptions["-p"] * 2){
                $height = getimagesize($value)[1] + $arrOptions["-p"] * 2;
            }
            $width += getimagesize($value)[0] + $arrOptions["-p"] * 2;
        }
    }
// Crea img container
    $imgContainer = imagecreatetruecolor($width, $height);
// suppr bg color 
    $color = imagecolorallocate($imgContainer, 0, 0, 0);
    imagefill($imgContainer, 0, 0, $color);
    imagecolortransparent($imgContainer, $color);
// Placement des img dans imgContainer
    if($arrOptions["-p"] != 0){
        $width = $arrOptions["-p"];
        $height = $arrOptions["-p"];
    } else {
        $width = 0;
        $height = 0;
    }
    foreach($arrImg as $value){
        $imgM = imagecreatefrompng($value);
        if ($arrOptions["-o"] != 0) {
            $imgM = imagescale($imgM, $arrOptions["-o"]);
            imagecopy($imgContainer, $imgM, $width, $arrOptions["-p"], 0, 0, getimagesize($value)[0] + $arrOptions["-p"] * 2, getimagesize($value)[1] + $arrOptions["-p"] * 2);
            $width += $arrOptions["-o"] + $arrOptions["-p"] * 2;
        } else {
            imagecopy($imgContainer, $imgM, $width, $arrOptions["-p"], 0, 0, getimagesize($value)[0] + $arrOptions["-p"] * 2, getimagesize($value)[1] + $arrOptions["-p"] * 2);
            $width += getimagesize($value)[0] + $arrOptions["-p"] * 2 ;
        }
    }
// def nom "sprite"
    if (array_key_exists("-i", $arrOptions)){
        imagepng($imgContainer, $arrOptions["-i"].".png");
    } else {
        imagepng($imgContainer, "sprite.png");
    }
}
function my_generate_css($arrImg, $arrOptions){
// Def nom fichier css 
    if (array_key_exists("-s", $arrOptions)) {
        $css = fopen($arrOptions["-s"].".css", "w");
    } else {
        $css = fopen("style.css", "w");
    }
    $str = ".sprite {\n\tbackground-image: url(spritesheet.png);\n\tbackground-repeat: no-repeat;\n\tdisplay: block;\n}\n";
    fwrite($css, $str);
    $width = $arrOptions["-p"];
    $height = 0;
    foreach ($arrImg as $value){
        $name = explode("/", $value);
        $name = $name[count($name)-1];
        $name = substr($name, 0, -4); 
        if (array_key_exists("-o", $arrOptions)) {
            $str = ".sprite-".$name."{\n\twidth: ".$arrOptions["-o"]."px;\n\theight: ".$arrOptions["-o"]."px;\n\tbackground-position: -".$width."px -".$arrOptions["-p"]."px;\n}\n";
            fwrite($css, $str);
            $width += $arrOptions["-o"] + $arrOptions["-p"] * 2;
        } else {
            $str = ".sprite-".$name."{\n\twidth: ".getimagesize($value)[0]."px;\n\theight: ".getimagesize($value)[1]."px;\n\tbackground-position: -".$width."px -".$arrOptions["-p"]."px;\n}\n";
            fwrite($css, $str);
            $width += getimagesize($value)[0];
        }
    }
}
$arrOptions = options();
$arrImg = my_scandir($argv[count($argv)-1]);
my_merge_image($arrImg, $arrOptions);
my_generate_css($arrImg, $arrOptions);